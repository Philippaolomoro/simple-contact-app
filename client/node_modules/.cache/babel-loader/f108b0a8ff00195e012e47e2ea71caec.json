{"ast":null,"code":"var _jsxFileName = \"/Users/philippaolomoro/Documents/projects/interview-test/factorial/client/src/components/Contacts.js\",\n    _s = $RefreshSig$();\n\nimport { Paper, List, ListItem, ListItemText, Divider, Button, Grid, Typography } from \"@mui/material\";\nimport { withStyles } from \"@mui/styles\";\nimport PropTypes from \"prop-types\";\nimport { Fragment } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useStore } from \"../store\";\nimport DeleteModal from \"./DeleteModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  paper: {\n    margin: \"24px\",\n    padding: \"16px\"\n  },\n  heading: {\n    fontSize: \"30px\"\n  }\n};\n\nconst Contacts = _ref => {\n  _s();\n\n  let {\n    classes\n  } = _ref;\n  const contact = useQuery(\"/contacts\");\n  const store = useStore();\n  const {\n    isFetching,\n    isFetched,\n    error,\n    data\n  } = contact;\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      className: classes.heading,\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), isFetching && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }, this), isFetched && error && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (data === null || data === void 0 ? void 0 : data.message) || \"Error occured\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 31\n    }, this), isFetched && (data === null || data === void 0 ? void 0 : data.contacts) && /*#__PURE__*/_jsxDEV(List, {\n      children: data === null || data === void 0 ? void 0 : data.contacts.map(_ref2 => {\n        let {\n          _id,\n          firstName,\n          phoneNumber,\n          lastName,\n          email\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              container: true,\n              direction: \"column\",\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: true,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  gutterBottom: true,\n                  variant: \"subtitle1\",\n                  component: \"div\",\n                  children: [firstName, \" \", lastName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  gutterBottom: true,\n                  children: email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: phoneNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: /*#__PURE__*/_jsxDEV(DeleteModal, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              size: \"large\",\n              type: \"submit\",\n              onClick: () => {\n                store.updateStore(\"contact\", {\n                  editingId: _id\n                });\n                store.updateStore(\"formModal\", {\n                  open: true\n                });\n              },\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            component: \"li\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)]\n        }, _id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Contacts, \"SjdivKDGXOy1Rlv1AtVItoX18SM=\", false, function () {\n  return [useQuery, useStore];\n});\n\n_c = Contacts;\nContacts.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Contacts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"sources":["/Users/philippaolomoro/Documents/projects/interview-test/factorial/client/src/components/Contacts.js"],"names":["Paper","List","ListItem","ListItemText","Divider","Button","Grid","Typography","withStyles","PropTypes","Fragment","useQuery","useStore","DeleteModal","styles","paper","margin","padding","heading","fontSize","Contacts","classes","contact","store","isFetching","isFetched","error","data","message","contacts","map","_id","firstName","phoneNumber","lastName","email","updateStore","editingId","open","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import { Paper, List, ListItem, ListItemText, Divider, Button, Grid, Typography } from \"@mui/material\";\nimport { withStyles } from \"@mui/styles\";\nimport PropTypes from \"prop-types\";\nimport { Fragment } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useStore } from \"../store\";\nimport DeleteModal from \"./DeleteModal\";\n\n\nconst styles ={\n  paper: {\n    margin: \"24px\",\n    padding: \"16px\" \n  },\n  heading: {\n    fontSize: \"30px\"\n  }\n}\n\nconst Contacts = ({ classes }) => {\n  const contact = useQuery(\"/contacts\");\n  const store = useStore();\n  const { isFetching, isFetched, error, data } = contact;\n\n  return (\n    <Paper className={classes.paper}>\n      <Grid className={classes.heading}>All</Grid>\n\n      { isFetching && <h1>Loading...</h1> }\n\n      { isFetched && error && <h1>{data?.message || \"Error occured\" }</h1> }\n\n      { isFetched && data?.contacts && (\n        <List>\n          {data?.contacts.map(({ _id, firstName, phoneNumber, lastName, email }) => (\n            <Fragment key={_id}>\n              <ListItem>\n                <Grid item xs container direction=\"column\" spacing={2}>\n                  <Grid item xs>\n                    <Typography gutterBottom variant=\"subtitle1\" component=\"div\">\n                      {firstName} {lastName}\n                    </Typography>\n                    <Typography variant=\"body2\" gutterBottom>\n                      {email}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {phoneNumber}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"body2\">\n                      <DeleteModal/> \n                    </Typography>\n                  </Grid>\n                </Grid>\n\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  type=\"submit\"\n                  onClick={() => {\n                    store.updateStore(\"contact\", { editingId: _id });\n                    store.updateStore(\"formModal\", { open: true })\n                  }}\n                >\n                  Edit\n                </Button>             \n              </ListItem>             \n              <Divider component=\"li\" />\n              \n            </Fragment>\n          ))}\n        </List>\n      )}\n\n    </Paper>\n  );\n}\n\nContacts.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n\n\nexport default withStyles(styles)(Contacts);\n"]},"metadata":{},"sourceType":"module"}